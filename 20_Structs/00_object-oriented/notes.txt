Go is Object Oriented

(1) Encapsulation
state ("fields)
behavior ("methods")
exported / un-exported

(2) Reusability
inheritance

(4) Overriding
"promotion"

///////////
Traditional OOP

classes
-- data structure describing a type of Object
-- you can then create "instances"/"objects" from the classe
-- classes hold both:
==== state / data / fields
==== behavior / methods
-- public / private

inheritence

////////////
In Go:
- you don't create classes, you create a type
- you dont instantiate, you create a value of a type
